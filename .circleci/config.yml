version: 2.1

orbs:
  android: circleci/android@1.0.0

commands:
  restore_caches:
    steps:
      - restore_cache:
          keys:
            - gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - restore_cache:
          keys:
            - gradle-cache-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
            - gradle-cache

      - restore_cache:
          keys:
            - gradle-build-caches-{{ .Revision }}
            - gradle-build-caches

      - run:
          name: Restoring Gradle Build Caches
          command: |
            [ -d ~/gradle-build-caches ] &&
              [ -n "$(ls -A ~/gradle-build-caches)" ] &&
              rm -rf ~/.gradle/caches/build-cache-* &&
              mv ~/gradle-build-caches/* ~/.gradle/caches/ || true
      - run:
          name: Downloading Dependencies
          command: ./gradlew --max-workers 2 downloadDependencies

      - save_cache:
          paths:
            - ~/.gradle/wrapper/
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - save_cache:
          paths:
            - ~/.gradle/caches/
          key: gradle-cache-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  save_gradle_build_caches:
    steps:
      - run:
          name: Collecting Gradle Build Caches
          command: |
            mkdir -p ~/gradle-build-caches
            [ -d ~/.gradle/caches ] &&
              [ -n "$(ls -Ad ~/.gradle/caches/build-cache-* 2>/dev/null)" ] &&
              mv ~/.gradle/caches/build-cache-* ~/gradle-build-caches || true
          when: always

      - save_cache:
          paths:
            - ~/gradle-build-caches
          key: gradle-build-caches-{{ .Revision }}
          when: always

  store_artifacts_test_reports:
    steps:
      - store_artifacts:
          path: app/build/reports
          destination: reports

      - store_test_results:
          path: app/build/test-results

  clean:
    steps:
      - run: ./gradlew clean

  debug_build:
    steps:
      - run: ./gradlew buildDebug

  debug_test:
    steps:
      # TODO: Fix emulator for code coverage:
      # TODO: I found out the issue with circle ci and android emulators. Well, I'm only using the free version
      # TODO: of circle ci and it provides only a medium size linux vm and it doesn't support virtualization. I noticed it
      # TODO: when I tried the same script in a demo project in a paid circle ci account and tried the pipeline in a large and xlarge size vm
      # TODO: and finally it worked. Unfortunately I won't be able to get a coverage report as a artifact.
      #- run: sudo apt update
      #- run: sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils cpu-checker
      #- run: egrep -c '(vmx|svm)' /proc/cpuinfo
      #- run: kvm-ok
      #- android/start-emulator-and-run-tests:
      #    post-emulator-launch-assemble-command: ''
      #    test-command: ./gradlew lintDebug ktlintDebugCheck testDebugUnitTest testDebugUnitTestCoverage
      - run: ./gradlew lintDebug ktlintDebugCheck testDebugUnitTest
      - store_artifacts_test_reports
      - save_gradle_build_caches

  release_build:
    steps:
      - run: ./gradlew buildRelease

  release_test:
    steps:
      # TODO: Fix emulator for code coverage
      #- run: sudo apt update
      #- run: sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils cpu-checker
      #- run: egrep -c '(vmx|svm)' /proc/cpuinfo
      #- run: kvm-ok
      #- android/start-emulator-and-run-tests:
      #    post-emulator-launch-assemble-command: ''
      #    test-command: ./gradlew lintRelease ktlintReleaseCheck testReleaseUnitTest testReleaseUnitTestCoverage
      - run: ./gradlew lintRelease ktlintReleaseCheck testReleaseUnitTest
      - store_artifacts_test_reports
      - save_gradle_build_caches

  release_assemble:
    steps:
      - run: ./gradlew assembleRelease
      - save_gradle_build_caches

  store_release_apk:
    steps:
      - store_artifacts:
          path: app/build/outputs/apk/release
          destination: apk

jobs:

  build_debug:
    executor: android/android
    steps:
      - checkout
      - restore_caches
      - clean
      - debug_build
      - save_gradle_build_caches

  test_debug:
    executor: android/android
    steps:
      - checkout
      - restore_caches
      - clean
      - debug_test

  build_test_debug:
    executor: android/android
    steps:
      - checkout
      - restore_caches
      - clean
      - debug_build
      - debug_test

  build_test_release:
    executor: android/android
    steps:
      - checkout
      - restore_caches
      - release_build
      - release_test

  generate_apk:
    executor: android/android
    steps:
      - checkout
      - restore_caches
      - release_assemble
      - store_release_apk

workflows:
  version: 2
  android_workflow:
    jobs:
      - build_debug:
          filters:
            branches:
              only: /^release\/.*/

      - test_debug:
          filters:
            branches:
              only:
                - /^task\/.*/
                - master

      - build_test_debug:
          filters:
            branches:
              only:
                - /^feature\/.*/
                - develop

      - build_test_release:
          requires:
            - build_debug
            - test_debug

          filters:
            branches:
              only:
                - /^release\/.*/
                - master

      - generate_apk:
          requires:
            - build_test_release
            - build_test_debug

          filters:
            branches:
              only:
                - /^release\/.*/
                - /^feature\/.*/
                - master